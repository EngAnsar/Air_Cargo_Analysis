
# 🛫 Air Cargo Analysis

<div align="center">

**Advanced Airline Database Management System**

[View Project](#) • [Database Schema](#-database-design) • [Queries](#-implemented-queries)

</div>

---

## 🎯 Project Highlights

| Feature | Details |
|---------|---------|
| 🗄 **Database** | MySQL with 4 normalized tables |
| 📊 **Records** | 150+ customer, route, and transaction data |
| 🔍 **Queries** | 20 advanced SQL queries |
| ⚙ **Procedures** | 4 stored procedures + 1 function |
| 📈 **Performance** | Optimized with indexes & window functions |
| 📚 **Documentation** | Complete with examples & diagrams |

---

## 📋 Quick Overview


🛫 Air Cargo Management System
├── 👥 50 Customers
├── ✈ 49 Flight Routes  
├── 🎫 50 Ticket Records
└── 📍 50 Passenger Assignments

Total: 150+ Records | 20+ Advanced Queries | Production-Ready


---

## 🗄 Database Schema

### Table Structure


┌─────────────────┐      ┌──────────────────┐
│    CUSTOMER     │      │     ROUTES       │
├─────────────────┤      ├──────────────────┤
│ -  customer_id   │◄─────┤ -  route_id       │
│ -  first_name    │  ┌──►│ -  flight_num     │
│ -  last_name     │  │   │ -  origin_airport │
│ -  gender        │  │   │ -  distance_miles │
│ -  date_of_birth │  │   └──────────────────┘
└─────────────────┘  │
                     │
┌──────────────────────┐  ┌──────────────────────┐
│  TICKET_DETAILS      │  │ PASSENGERS_ON_FLIGHTS│
├──────────────────────┤  ├──────────────────────┤
│ -  p_date (PK)        │  │ -  customer_id (PK)   │
│ -  customer_id (FK)   │  │ -  aircraft_id (PK)   │
│ -  aircraft_id        │  │ -  travel_date (PK)   │
│ -  class_id           │  │ -  route_id (FK)      │
│ -  price_per_ticket   │  │ -  seat_num           │
│ -  brand              │  │ -  depart/arrival     │
└──────────────────────┘  └──────────────────────┘


### Normalization: **BCNF**
- All tables properly normalized
- Foreign key relationships enforced
- Data integrity constraints applied
- No data redundancy

---

## 🔍 Database Queries (20 Total)

### Category 1️⃣ - Basic Operations

1. Display all customers
2. Customer name extraction
3. Passenger details with joins
4. Ticket listing by class
5. Revenue calculations


### Category 2️⃣ - Advanced Joins & Aggregations

6. Multi-table complex queries
7. Group By with aggregations
8. Conditional filtering
9. Sorting & limiting results
10. Aggregate functions (COUNT, SUM, AVG, MAX, MIN)


### Category 3️⃣ - Analytics & Optimisation

11. Window functions for ranking
12. Running totals & cumulative sums
13. Performance analysis with EXPLAIN
14. Query execution plans
15. Indexed query optimisation 

### Category 4️⃣ - Advanced Features

16. Stored Procedure: Route Range Search
17. Stored Procedure: Long Distance Routes
18. Stored Procedure: Distance Categorisation
19. Stored Function: Service Eligibility
20. View Creation: Business Class Analytics
---

## 📂 Project Structure
Air_Cargo_Analysis/
│
├── 📖 README.md (Project documentation)
│
├── 📂 data/
│   ├── customer_data.csv
│   ├── routes_data.csv
│   ├── ticket_details_data.csv
│   └── passengers_on_flights_data.csv
│
├── 📂 diagram/
│   ├── er_diagram.txt
│   ├── table_relationships.md
│   └── schema_structure.pdf
│
├── 📂 sql/
│   ├── 01_create_tables.sql
│   ├── 02_insert_data.sql
│   ├── 03_basic_queries.sql
│   ├── 04_advanced_queries.sql
│   ├── 05_stored_procedures.sql
│   ├── 06_stored_functions.sql
│   └── all_queries_complete.sql
│
└── 📂 screenshots/
├── database_schema.png
├── query_results_sample.png
├── stored_procedure_execution.png
├── performance_analysis.png
└── view_demonstration.png
---

## 🚀 Quick Start

### Step 1: Prerequisites✅ MySQL 5.7+ installed
✅ MySQL Workbench (optional but recommended)
✅ Basic SQL knowledge
### Step 2: Database Setup-- Create database
CREATE DATABASE air_cargo;
USE air_cargo;-- Import schema
SOURCE ./sql/01_create_tables.sql;-- Insert data
SOURCE ./sql/02_insert_data.sql;
### Step 3: Run Queries-- Execute all queries
SOURCE ./sql/03_basic_queries.sql;
SOURCE ./sql/04_advanced_queries.sql;
SOURCE ./sql/05_stored_procedures.sql;
---

## 📊 Key Statistics

### Data Overview
| Metric | Value |
|--------|-------|
| Total Customers | 50 |
| Total Routes | 49 |
| Total Tickets | 50 |
| Total Passengers | 50 |
| Date Range | 1977-2011 (DOB) |
| Average Ticket Price | $290 |
| Max Route Distance | 4,962 miles |
| Min Route Distance | 578 miles |

### Query Performance
| Query Type | Count | Avg Time |
|-----------|-------|----------|
| Basic SELECT | 5 | < 10ms |
| Complex JOINs | 5 | 10-50ms |
| Aggregations | 5 | 20-100ms |
| Procedures | 4 | 50-200ms |
| Window Functions | 1 | 100-300ms |

---

## 💻 Featured Queries

### Query 1: Customer-Ticket AnalyticsSELECT c.customer_id, c.first_name, c.last_name,
COUNT() as ticket_count,
SUM(t.Price_per_ticket) as total_spent
FROM customer c
JOIN ticket_details t ON c.customer_id = t.customer_id
GROUP BY c.customer_id
HAVING COUNT() > 1
ORDER BY total_spent DESC;
### Query 2: Stored Procedure - Route RangeCALL get_passengers_by_route_range(1, 10);
-- Returns: Passengers traveling routes 1-10
### Query 3: Window Function - Top SpendersSELECT customer_id, Price_per_ticket,
ROW_NUMBER() OVER (ORDER BY Price_per_ticket DESC) as rank
FROM ticket_details
WHERE class_id = 'Business'
LIMIT 10;
---

## 🎓 Learning Outcomes

✅ *Database Design*
- Normalization to BCNF
- Entity-Relationship modeling
- Constraint implementation

✅ *Advanced SQL*
- Complex JOINs (INNER, LEFT, RIGHT)
- Subqueries & nested queries
- Window functions & analytics

✅ *Performance Optimization*
- Query execution plans (EXPLAIN)
- Index strategies
- Query tuning techniques

✅ *Stored Objects*
- Stored procedures with parameters
- Custom functions
- Views for data abstraction

---

## 🛠 Technologies Used
🗄  Backend:      MySQL 8.0+
📝 Language:      SQL / Procedural SQL
🖥  Tool:          MySQL Workbench
📚 Documentation: Markdown
🔐 Version Control: Git/GitHub
---

## 📈 Key Achievements

✅ *Normalization*
- Database normalised to BCNF
- Eliminated redundancy
- Maintained referential integrity

✅ *Query Optimization*
- 20 advanced queries executed successfully
- Performance analysed with EXPLAIN plans
- Optimal execution achieved

✅ *Advanced Features*
- 4 stored procedures created
- 1 custom function implemented
- 1 analytical view created

✅ *Documentation*
- Complete SQL scripts provided
- ✅ *Documentation*
- Complete SQL scripts provided
- Query explanations included
- Schema diagrams documented

---

## 🎯 Use Cases

### 1. Business Analytics, Revenue analysis by class, Customer spending patterns, Route popularity analysis
### 2. Operational Management: Passenger list by route, Ticket inventory management, Flight scheduling optimisation
### 3. Customer Services, Customer travel history, Service eligibility determination, Loyalty program tracking
---

## 🔐 Security Features

✅ *Data Integrity*
- Foreign key constraints
- NOT NULL constraints
- CHECK constraints for validation

✅ *Query Security*
- Parameterised queries
- Input validation
- Principle of least privilege

---

## 🚦 Status & Maintenance

| Component | Status |
|-----------|--------|
| Database Design | ✅ Complete |
| Data Import | ✅ Complete |
| Query Development | ✅ Complete (20/20) |
| Documentation | ✅ Complete |
| Testing | ✅ Completed |
| *Overall Project* | ✅ *PRODUCTION READY* |

---

## 📚 Code Examples

### Example 1: Find Business Class RevenueSELECT
brand,
COUNT(*) as ticket_count,
SUM(Price_per_ticket) as total_revenue,
AVG(Price_per_ticket) as avg_price
FROM ticket_details
WHERE class_id = 'Business'
GROUP BY brand
ORDER BY total_revenue DESC;
### Example 2: Call Stored Procedure-- Get passengers for specific distance category
CALL categorize_distance_travel();-- Output: Routes grouped by SDT/IDT/LDT
### Example 3: Use Custom FunctionSELECT
DISTINCT class_id,
get_complimentary_services(class_id) as services_included
FROM ticket_details;-- Output: Business/Economy Plus get 'Yes', others get 'No'
---

## ❓ FAQs

*Q: How to set up the database locally?*A: Follow the Quick Start section above
*Q: Can I modify the queries?*A: Yes! Feel free to fork and customise
*Q: Are backups included?*A: Use mysqldump for backups:
mysqldump -u root -p air_cargo > backup.sql
---

## 🤝 Contributing

Contributions are welcome! 
Fork the repositoryCreate a feature branch. Commit changes. Push to branch Open Pull Request
---

## 📄 License

This project is licensed under the *MIT License* - feel free to use it for learning and commercial purposes.

---

## 📞 Support

- 📧 Questions? Create an issue
- 🐛 Found a bug? Report it
- 💡 Suggestions? Let me know

---

## 🌟 Star This Project

If you found this helpful, please ⭐ star this repository!

---

## 📅 Project Timeline
Oct 27, 2025  → Project Start
Oct 28-30, 2025 → Development & Testing
Oct 31, 2025  → Documentation & Upload
Status: ✅ COMPLETE
---

## 🔗 Related Resources

- [MySQL Documentation](https://dev.mysql.com/)
- [SQL Window Functions](https://www.w3schools.com/sql/sql_window_functions.asp)
- [Database Normalisation](https://en.wikipedia.org/wiki/Database_normalization)
- [Query Optimisation](https://use-the-index-luke.com/)

---

## 🎓 Next Steps

- [ ] Add API layer (Node.js/Python)
- [ ] Create web dashboard
- [ ] Implement triggers
- [ ] Add caching strategy
- [ ] Build analytics reports
- [ ] Deploy to cloud

---

<div align="center">

### ⭐ Made with ❤ for Database Learning


[⬆ Back to top](#-air-cargo-analysis)

</div>
